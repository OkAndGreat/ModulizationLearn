plugins {
    id 'kotlin-android'
}

//集成化环境和组件化环境
if (isRelease) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

android {
    compileSdk commonConfig.compileSdk

    defaultConfig {
        if (isRelease) {
            applicationId appId.login
        }
        minSdk commonConfig.minSdk
        targetSdk commonConfig.targetSdk
        versionCode commonConfig.versionCode
        versionName commonConfig.versionName

        testInstrumentationRunner commonConfig.testInstrumentationRunner

        /// 在gradle文件中配置选项参数值（用于APT传参接收）
        // 同学们注意：切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

//    implementation 'androidx.core:core-ktx:1.6.0'
//    implementation 'androidx.appcompat:appcompat:1.3.1'
//    implementation 'com.google.android.material:material:1.4.0'
//    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    //  arouter 专用 注解模块
    implementation project(":arouter_annotation")

    // arouter 专用 注解处理器
    annotationProcessor project(':arouter_compiler')

    dependenciesConfig.each { k, v -> implementation v }

}